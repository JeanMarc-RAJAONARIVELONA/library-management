openapi: 3.0.3
info:
  title: Library API
  version: 1.2.0
  description: STD22043
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateRange
          description: Filter books by release date range
          required: false
          schema:
            type: object
            properties:
              from:
                type: string
                format: date
                description: Start of date range
              to:
                type: string
                format: date
                description: End of date range
        - in: query
          name: page
          description: |
            The page number.
            Used when paginating the books
          schema:
            type: integer
            default: 1
          required: false
        - in: query
          name: pageSize
          description: |
            The count of all books in each page
          schema:
            type: integer
            default: 50
          required: false
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    put:
      tags:
        - "Books"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Book"
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "Books"
      summary: Attach an Author to a Book
      operationId: attachAuthorToBook
      parameters:
        - in: path
          name: bookId
          description: ID of the Book
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: ID of the Author
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author attached to the Book successfully
  /books/authors:
    put:
      tags:
        - "Books"
      summary: Attach Authors to Books
      operationId: attachAuthorsToBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        200:
          description: Authors attached to Books successfully
  /authors:
    get:
      tags:
        - "Authors"
      summary: Get all authors
      description: Retrieve a list of all authors or filter by name.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
        - in: query
          name: page
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: List of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    put:
      tags:
        - "Authors"
      summary: Create or update a list of authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        200:
          description: List of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    delete:
      tags:
        - "Authors"
      summary: Delete an author by ID
      operationId: deleteAuthor
      parameters:
        - in: path
          name: authorId
          description: ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        204:
          description: Author deleted successfully
components:
  schemas:
    Book:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
      properties:
        author:
          $ref: "#/components/schemas/Author"
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
