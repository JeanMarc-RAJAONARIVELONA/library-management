openapi: 3.0.3
info:
  title: Library API
  version: 1.3.0
  description: STD22043
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateRange
          description: Filter books by release date range
          required: false
          schema:
            type: object
        - $ref: "#/components/parameters/QueryPagination"
        - $ref: "#/components/parameters/PathPagination"
          properties:
            from:
              type: string
              format: date
              description: Start of date range
            to:
              type: string
              format: date
              description: End of date range
        - in: query
          name: page
          description: |
            The page number.
            Used when paginating the books
          schema:
            type: integer
            default: 1
          required: false
        - in: query
          name: pageSize
          description: |
            The count of all books in each page
          schema:
            type: integer
            default: 50
          required: false
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        400:
          description: bad bad request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
    put:
      tags:
        - "Books"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Book"
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        400:
          description: bad bad request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "Books"
      summary: Attach an Author to a Book
      operationId: attachAuthorToBook
      parameters:
        - in: path
          name: bookId
          description: ID of the Book
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: ID of the Author
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author attached to the Book successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        400:
          description: bad bad request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
  /books/authors:
    put:
      tags:
        - "Books"
      summary: Attach Authors to Books
      operationId: attachAuthorsToBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        200:
          description: Authors attached to Books successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        400:
          description: bad bad request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
  /books/import:
    post:
      tags:
        - "Books"
      summary: Import books from Excel or JSON
      operationId: importBooks
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                excelFile:
                  type: string
                  format: binary
                  description: Excel file containing book data
                jsonFile:
                  type: string
                  format: binary
                  description: JSON file containing book data
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ImportBook"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet: # Type MIME pour les fichiers Excel
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ImportBook"
      responses:
        200:
          description: List of imported books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"

  /authors:
    get:
      tags:
        - "Authors"
      summary: Get all authors
      description: Retrieve a list of all authors or filter by name.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPagination"
        - $ref: "#/components/parameters/PathPagination"

      responses:
        200:
          description: List of authors
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        400:
          description: bad bad request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
    put:
      tags:
        - "Authors"
      summary: Create or update a list of authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/responses/CommonResponse"
                - type: object
                  properties:
                    body:
                      $ref: "#/components/schemas/Author"
      responses:
        200:
          description: List of created or updated authors
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        400:
          description: bad bad request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
    delete:
      tags:
        - "Authors"
      summary: Delete an author by ID
      operationId: deleteAuthor
      parameters:
        - in: path
          name: authorId
          description: ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        204:
          description: Author deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        400:
          description: bad bad request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
  /authors/import:
    post:
      tags:
        - "Authors"
      summary: Import authors from Excel or JSON
      operationId: importAuthors
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                excelFile:
                  type: string
                  format: binary
                  description: Excel file containing author data
                jsonFile:
                  type: string
                  format: binary
                  description: JSON file containing author data
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet: # Type MIME pour les fichiers Excel
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        200:
          description: List of imported authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
  /visitors:
    get:
      tags:
        - "Visitors"
      summary: Get a list of all visitors
      operationId: getAllVisitors
      responses:
        200:
          description: List of all visitors retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Visitor"
    post:
      tags:
        - "Visitors"
      summary: Create a new visitor
      operationId: createVisitor
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Visitor"
      responses:
        201:
          description: Visitor created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Visitor"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/responses/CommonResponse"
  /visitors/{visitorId}:
    delete:
      tags:
        - "Visitors"
      summary: Delete visitor by ID
      operationId: deleteVisitorById
      parameters:
        - in: path
          name: visitorId
          description: ID of the visitor to delete
          required: true
          schema:
            type: string
      responses:
        204:
          description: Visitor deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/responses/CommonResponse"
        404:
          description: Visitor not found
          content:
            application/json:
              schema:
                $ref: "#/components/responses/CommonResponse"
components:
  schemas:
    Book:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
        - type: object
          properties:
            file_type:
              enum:
                - Excel
                - JSON
      properties:
        author:
          $ref: "#/components/schemas/Author"
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    ImportBook:
      type: object
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
        idAuthor:
          type: string
    Visitor:
      type: object
      properties:
        IdAuthor:
          type: integer
        name:
          type: string
        reference:
          type: string
  responses:
    CommonResponse:
      description: A generic answer for all answers
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
              body:
                type: object
  parameters:
    QueryPagination:
      in: query
      name: queryPagination
      description: "Page number for pagination"
      required: false
      schema:
        type: integer
        default: 1
    PathPagination:
      name: pathPagination
      in: query
      description: Page number for pagination
      required: true
      schema:
        type: integer
